generator client {
  provider = "prisma-client-js"
  output   = "../../../../node_modules/.prisma/client"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum PostType {
  video
  text
  quote
  photo
  link
}
model Post {
  postId       Int       @id @default(autoincrement()) @map("post_id")
  userId       String    @map("user_id")
  originPostId Int?      @map("origin_post_id")
  originUserId String?   @map("origin_user_id")
  title        String?   @default("")
  link         String?   @default("")
  announce     String?   @default("")
  description  String?   @default("")
  author       String?   @default("")
  photo        String?   @default("")
  tags         String[]
  isRepost     Boolean   @default(false) @map("is_repost")
  isPublished  Boolean   @default(true) @map("is_published")
  createdAt    DateTime  @default(now()) @map("created_at")
  publishAt    DateTime? @updatedAt @map("published_at")
  type         PostType
  comments     Comment[]
  likes        Like[]
  @@map("posts")
}
model Comment {
  commentId Int      @id @default(autoincrement()) @map("comment_id")
  message   String
  userId    String   @map("user_id")
  post      Post     @relation(fields: [postId], references: [postId], onDelete: Cascade, onUpdate: Cascade)
  postId    Int      @map("post_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  @@map("comments")
}
model Like {
  likeId    Int      @id @default(autoincrement()) @map("like_id")
  post      Post     @relation(fields: [postId], references: [postId], onDelete: Cascade)
  postId    Int      @map("post_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  @@map("likes")
}
